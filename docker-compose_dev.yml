# https://docs.docker.com/compose/yml/
# Each service defined in docker-compose.yml must specify exactly one of
# image or build. Other keys are optional, and are analogous to their
# docker run command-line counterparts.
#
# As with docker run, options specified in the Dockerfile (e.g., CMD,
# EXPOSE, VOLUME, ENV) are respected by default - you don't need to
# specify them again in docker-compose.yml.
#
# Fedora (and RHEL, CentOS) use SELinux.
# Docker needs :z volume mount options to provide a context label.
# See man docker-run

version: '3.7'

services:

  chris_dev:
    image: ${CHRISREPO}/chris:dev
    volumes:
      - ./chris_backend:/home/localuser/chris_backend:z
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - DJANGO_DB_MIGRATE=on
      - DJANGO_COLLECTSTATIC=off
    ports:
      - "8000:8000"
    depends_on:
      - chris_dev_db
      - swift_service
      - queue
      - chris_store
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd"
      role: "Backend development server"

  worker:
    image: ${CHRISREPO}/chris:dev
    volumes:
      - ./chris_backend:/home/localuser/chris_backend:z
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
      - CELERY_RDB_HOST=0.0.0.0
    command: celery -A core worker -c 3 -l DEBUG -Q main1,main2
    ports:
      - "6900:6900"
    depends_on:
      - chris_dev_db
      - swift_service
      - queue
      - pfcon_service
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd Asynchronous Tasks Worker"
      role: "Backend development async task worker"

  worker_periodic:
    image: ${CHRISREPO}/chris:dev
    volumes:
      - ./chris_backend:/home/localuser/chris_backend:z
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
      - CELERY_RDB_HOST=0.0.0.0
    command: celery -A core worker -c 1 -l DEBUG -Q periodic
    ports:
      - "7900:6900"
    depends_on:
      - chris_dev_db
      - queue
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd Periodic Task Worker"
      role: "Backend development periodic task worker"

  scheduler:
    image: ${CHRISREPO}/chris:dev
    volumes:
      - ./chris_backend:/home/localuser/chris_backend:z
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.local
      - DJANGO_DB_MIGRATE=off
      - DJANGO_COLLECTSTATIC=off
    command: celery -A core beat -l info --pidfile /home/localuser/celerybeat.pid --scheduler django_celery_beat.schedulers:DatabaseScheduler
    depends_on:
      - chris_dev_db
      - queue
    # restart until Django DB migrations are ready
    restart: on-failure
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd Periodic Tasks Scheduler"
      role: "Backend development periodic tasks scheduler"

  chris_dev_db:
    image: mysql:5
    volumes:
      - chris_dev_db_data:/var/lib/mysql:z
    environment:
      - MYSQL_ROOT_PASSWORD=rootp
      - MYSQL_DATABASE=chris_dev
      - MYSQL_USER=chris
      - MYSQL_PASSWORD=Chris1234
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd MySQL Database"
      role: "Backend development database"

  queue:
    image: rabbitmq:3
    networks:
      - local
    labels:
      name: "ChRIS_ultron_backEnd Asynchronous Task Queue"
      role: "Backend development async task queue"

  chris_store:
    image: ${STOREREPO}/chris_store
    environment:
      - DJANGO_SETTINGS_MODULE=config.settings.production
      - DJANGO_DB_MIGRATE=on
      - DJANGO_ALLOWED_HOSTS=*
      - DJANGO_SECRET_KEY="w1kxu^l=@pnsf!5piqz6!!5kdcdpo79y6jebbp+2244yjm*#+k"
      - DJANGO_CORS_ORIGIN_ALLOW_ALL=true
      - DJANGO_CORS_ORIGIN_WHITELIST=babymri.org
      - DJANGO_SECURE_PROXY_SSL_HEADER=
      - DJANGO_USE_X_FORWARDED_HOST=false
      - DATABASE_HOST=chris_store_db
      - DATABASE_PORT=3306
      - SWIFT_AUTH_URL=http://swift_service:8080/auth/v1.0
      - MYSQL_ROOT_PASSWORD=rootp
      - MYSQL_DATABASE=chris_store
      - MYSQL_USER=chris
      - MYSQL_PASSWORD=Chris1234
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
      - SWIFT_CONTAINER_NAME=store_users
    ports:
      - "8010:8010"
    depends_on:
      - chris_store_db
      - swift_service
    networks:
      local:
        aliases:
          - chris-store.local
    labels:
      name: "ChRIS_store"
      role: "Chris store service"

  chris_store_db:
    image: mysql:5
    volumes:
      - chris_store_db_data:/var/lib/mysql:z
    environment:
      - MYSQL_ROOT_PASSWORD=rootp
      - MYSQL_DATABASE=chris_store
      - MYSQL_USER=chris
      - MYSQL_PASSWORD=Chris1234
    networks:
      - local
    labels:
      name: "ChRIS_store MySQL Database"
      role: "Chris store database"

  swift_service:
    image: ${SWIFTREPO}/docker-swift-onlyone
    init: true
    volumes:
      - swift_storage_dev:/srv:z
    environment:
      - SWIFT_USERNAME=chris:chris1234
      - SWIFT_KEY=testing
    ports:
      - "8080:8080"
    networks:
      - local
    labels:
      name: "Swift"
      role: "Swift object storage service"

  pfcon_service:
    image: ${PFCONREPO}/pfcon${TAG}
    ports:
      - "5005:5005"
    depends_on:
      - pman_service
      - pfioh_service
    environment:
      - SECRET_KEY="w1kxu^l=@pnsf!5piqz6!!5kdcdpo79y6jebbp+2244yjm*#+k"
      - COMPUTE_SERVICE_URL=http://pman_service:5010/api/v1/
      - DATA_SERVICE_URL=http://pfioh_service:5055/api/v1/cmd
    networks:
      local:
        aliases:
          - pfcon.local
      remote:
    labels:
      name: "pfcon"
      role: "pfcon service"

  pfioh_service:
    # We need to map a physical dir in the HOST to the key store in pfioh.
    # The keystore is specified by the --storeBase flag.
    image: ${PFIOHREPO}/pfioh${TAG}
    command: ["--forever", "--httpResponse", "--createDirsAsNeeded", "--storeBase", "/hostFS/storeBase", "--verbosity", "1"]
    volumes:
      - ${STOREBASE}:/hostFS/storeBase:z
    ports:
      - "5055:5055"
    networks:
      - remote
    labels:
      name: "pfioh"
      role: "pfioh service"

  pman_service:
    # Since pman spins off containers of its own it needs to mount storeBase dir (where
    # pfioh shares the data) into the spawned container. However, it can't mount a dir
    # inside itself to the spawned container, it has to mount an actual existing
    # directory in the host. This directory is passed in the STOREBASE env variable.
    environment:
      - STOREBASE
      - SECRET_KEY="w1kxu^l=@pnsf!5piqz6!!5kdcdpo79y6jebbp+2244yjm*#+k"
      - CONTAINER_ENV=swarm
    image: ${PMANREPO}/pman${TAG}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:z
    ports:
      - "5010:5010"
    networks:
      - remote
    labels:
      name: "pman"
      role: "pman service"

networks:
  local:
  remote:

volumes:
  chris_dev_db_data:
  chris_store_db_data:
  swift_storage_dev:
