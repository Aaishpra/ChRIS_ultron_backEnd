# https://docs.docker.com/compose/yml/
# Each service defined in docker-compose.yml must specify exactly one of
# image or build. Other keys are optional, and are analogous to their
# docker run command-line counterparts.
#
# As with docker run, options specified in the Dockerfile (e.g., CMD,
# EXPOSE, VOLUME, ENV) are respected by default - you don't need to
# specify them again in docker-compose.yml.
#

chris_dev:
  image:  ${CREPO}/chris_dev_backend
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./chris_backend:/usr/src/chris_backend
    # - ./FS/local:/hostFS/pfconFS
  volumes_from:
    - dicom_listener
    - chris_dev_files
  ports:
    - "8000:8000"
  links:
    - chris_dev_db:mysql
    - pfcon_service:pfcon
    - pman_service:pman
  labels:
    name: "ChRIS_ultron_backEnd"
    role: "Backend development server"

chris_dev_files:
  image:  alpine
  command: "chmod 777 /usr/users"
  volumes:
    - /usr/users
    - /data
  labels:
    name: "ChRIS_ultron_backEnd feed files"
    role: "Backend development feed files"

chris_dev_db:
  image:  mysql:5
  volumes_from:
    - chris_dev_db_data
  environment:
    - MYSQL_ROOT_PASSWORD=rootp
    - MYSQL_DATABASE=chris_dev
    - MYSQL_USER=chris
    - MYSQL_PASSWORD=Chris1234
  labels:
    name: "ChRIS_ultron_backEnd MySQL Database"
    role: "Backend development database"

chris_dev_db_data:
  image:  alpine
  command: echo Data container
  volumes:
    - /var/lib/mysql
  labels:
    name: "ChRIS_ultron_backEnd database data"
    role: "Backend development database data"

dicom_listener:
  image:  fnndsc/dck-dicom-listener
  volumes:
    - /incoming
    - ./FS/remote:/hostFS/storeBase
  ports:
    - "10402:10402"
  labels:
    name: "dicom_listener"
    role: "Dicom listener"

pfcon_service:
  image:  ${CREPO}/pfcon
  command: ["--forever", "--httpResponse"]
  # volumes:
  #   - ./FS/local:/hostFS/pfconFS
  volumes_from:
    - dicom_listener
    - chris_dev_files
  ports:
    - "5005:5005"
  links:
    - pman_service:pman
    - pfioh_service:pfioh
  labels:
    name: "pfcon"
    role: "pfcon service"

pfioh_service:
  # The following is a bit complicated... Basically we need to map a physical dir
  # in the HOST to the key store in pfioh. The keystore is specified by the 
  # --storeBase flag.
  image:  ${CREPO}/pfioh
  command: ["--forever", "--httpResponse", "--createDirsAsNeeded", "--storeBase", "/hostFS/storeBase"]
  volumes:
    - ./FS/remote:/hostFS/storeBase
  ports:
    - "5055:5055"
  labels:
    name: "pfioh"
    role: "pfioh service"

pman_service:
  # pman also needs access to the pfioh storeBase folder (and hence the volume)
  # mapping from the HOST file system space.
  #
  # There is however an extra twist. Since pman spins off containers of its
  # own, it needs to mount this storeBase dir into the spawned container.
  # However, it can't mount a dir inside itself to the spawned container, 
  # it has to mount an actaul existing directory. This directory is
  # passed in the SHAREDIRBASE env variable, and will override the base 
  # mapping of SHAREDIR inside pman to the swarm manager. Note that the
  # full path to the spawned container should be ${SHAREDIRBASE} + keyStore!
  environment:
    - STOREBASE
  image:  ${CREPO}/pman
  command: ["--rawmode", "1", "--http", "--port", "5010", "--listeners", "12"]
  volumes:
    - /var/run/docker.sock:/var/run/docker.sock
    - ./FS/remote:/hostFS/storeBase
    - ../pman:/usr/local/pman
  ports:
    - "5010:5010"
  labels:
    name: "pman"
    role: "pman service"


